  {/* ✅ Edit Dialog for Developer */}
      {role !== "client" && (
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Task + Comments</DialogTitle>
            </DialogHeader>

            <div className="space-y-3">
              <Input
                value={editTitle}
                onChange={(e) => setEditTitle(e.target.value)}
                placeholder="Title"
              />
              <Input
                value={editPhone}
                onChange={(e) => setEditPhone(e.target.value)}
                placeholder="Phone"
              />

              {/* ✅ Shadcn Date + Time Picker */}
              <div className="flex space-x-2">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-[200px] justify-start text-left font-normal",
                        !editDate && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {editDate
                        ? format(new Date(editDate), "PPP")
                        : "Pick a date"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={editDate ? new Date(editDate) : undefined}
                      onSelect={(d) => {
                        if (d) {
                          const newDate = new Date(d);
                          if (editDate) {
                            const old = new Date(editDate);
                            newDate.setHours(old.getHours());
                            newDate.setMinutes(old.getMinutes());
                          }
                          setEditDate(newDate.toISOString());
                        }
                      }}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>

                <Input
                  type="time"
                  value={
                    editDate ? new Date(editDate).toISOString().slice(11, 16) : ""
                  }
                  onChange={(e) => {
                    if (!editDate) {
                      const today = new Date();
                      const [h, m] = e.target.value.split(":");
                      today.setHours(+h, +m);
                      setEditDate(today.toISOString());
                    } else {
                      const d = new Date(editDate);
                      const [h, m] = e.target.value.split(":");
                      d.setHours(+h, +m);
                      setEditDate(d.toISOString());
                    }
                  }}
                  className="w-[120px]"
                />
              </div>

              <Input
                value={editDescription}
                onChange={(e) => setEditDescription(e.target.value)}
                placeholder="Description"
              />
            </div>

            {/* Comments inside Edit Dialog */}
            <div className="mt-4">
              <h4 className="text-sm font-medium text-gray-700 flex items-center gap-2">
                <MessageSquare size={16} /> Comments ({comments.length})
              </h4>
              <div className="space-y-2 mt-3">
                {comments.map((c) => (
                  <div
                    key={c.id}
                    className="p-2 bg-gray-50 border rounded-md text-sm flex justify-between"
                  >
                    <div>
                      <span className="font-medium text-blue-600">{c.by}</span>:{" "}
                      {c.text}
                      <div className="text-xs text-gray-400">{c.date}</div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-3 flex gap-2">
                <Input
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  placeholder="Write a comment..."
                />
                <Button
                  onClick={handleAddComment}
                  variant="secondary"
                  size="sm"
                  disabled={!newComment.trim()}
                >
                  Add
                </Button>
              </div>
            </div>

            <DialogFooter className="flex gap-2 mt-4">
              <Button
                className="cursor-pointer"
                onClick={saveEdit}
                variant="default"
              >
                <Save /> Save
              </Button>
              <Button
                className="cursor-pointer hover:bg-neutral-200"
                onClick={() => setIsDialogOpen(false)}
                variant="secondary"
              >
                <X /> Cancel
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      {/* ✅ Comment Dialog for Client */}
      {role === "client" && (
        <Dialog open={isCommentDialogOpen} onOpenChange={setIsCommentDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Task Comments</DialogTitle>
            </DialogHeader>

            <div className="space-y-2 mt-3">
              {comments.map((c) => (
                <div
                  key={c.id}
                  className="p-2 bg-gray-50 border rounded-md text-sm"
                >
                  <span className="font-medium text-blue-600">{c.by}</span>:{" "}
                  {c.text}
                  <div className="text-xs text-gray-400">{c.date}</div>
                </div>
              ))}
            </div>
            <div className="mt-3 flex gap-2">
              <Input
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                placeholder="Write a comment..."
              />
              <Button
                onClick={handleAddComment}
                variant="secondary"
                size="sm"
                disabled={!newComment.trim()}
              >
                Add
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      )}